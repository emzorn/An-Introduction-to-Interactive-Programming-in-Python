# "Blackjack"

import simplegui
import random

# load card sprite - 949x392 - source: jfitz.com
CARD_SIZE = (73, 98)
CARD_CENTER = (36.5, 49)
card_images = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/cards.jfitz.png")

CARD_BACK_SIZE = (71, 96)
CARD_BACK_CENTER = (35.5, 48)
card_back = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/card_back.png")

# initialize some useful global variables
in_play = False
outcome = ""
score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}

# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank),
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)

# define hand class
class Hand:
    def __init__(self):
        self.hand = []
    
    def __str__(self):
        sh = [str(card) for card in self.hand]
        return str(sh)

    def add_card(self, card):
        self.hand.append(card)

    def get_value(self):
        hand_value = 0
        for card in self.hand:
            hand_value += VALUES[card.get_rank()]
        for card in self.hand:
            if card.get_rank() == 'A' and hand_value + 10 <= 21:
                hand_value += 10
        return hand_value

    def draw(self, canvas, pos):
        i = 0
        for c in self.hand:
            c.draw(canvas, [pos[0] + i * (10 + CARD_SIZE[0]), pos[1]])
            i += 1

# define deck class
class Deck:
    def __init__(self):
        self.deck = [Card(s, r) for s in SUITS for r in RANKS]

    def shuffle(self):
        random.shuffle(self.deck)

    def deal_card(self):
        return self.deck.pop(self.deck.index(random.choice(self.deck)))
    
    def __str__(self):
        sd = [str(card) for card in self.deck]
        return str(sd)

player = Hand()
dealer = Hand()
deck = Deck()

# define event handlers for buttons
def deal():
    global outcome, in_play, player, dealer, deck, score
    player = Hand()
    dealer = Hand()
    deck = Deck()
    deck.shuffle()
    if in_play:
        score -= 1
    else:
        outcome = "New Deal. Hit or Stand?"
    player.add_card(deck.deal_card())
    player.add_card(deck.deal_card())
    in_play = False
    dealer.add_card(deck.deal_card())
    in_play = True
    dealer.add_card(deck.deal_card())

def hit():
    global outcome, in_play, score, player, dealer, deck
    if in_play and player.get_value() <= 21:
        if player.get_value() == 21:
            outcome = "BLACKJACK! You win! New deal?"
            score += 1
            in_play = False
        else:
            player.add_card(deck.deal_card())
            if player.get_value() > 21:
                outcome = "Player bust. You lose! New deal?"
                score -= 1
                in_play = False
            else:
                outcome = "Hit or Stand?"
    elif not in_play and player.get_value() < 21:
        dealer.add_card(deck.deal_card())

def stand():
    global outcome, in_play, player, dealer, deck, score
    if in_play:
        in_play = False
        while dealer.get_value() < 17:
            dealer.add_card(deck.deal_card())
        if dealer.get_value() > 21:
            score += 1
            outcome = "Dealer bust. You win! New deal?"
        elif dealer.get_value() >= player.get_value():
            score -= 1
            outcome = "You lose! New deal?"
        else:
            score += 1
            outcome = "You win! New deal?"

# draw handler
def draw(canvas):
    dealer.draw(canvas, [25, 200])
    player.draw(canvas, [25, 400])
    if in_play:
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, [61, 250], CARD_BACK_SIZE)
    elif not in_play:
        canvas.draw_text("Card Count:  " + str(dealer.get_value()), [25, 325], 16, "White", "sans-serif")
    canvas.draw_text(outcome, [25, 100], 20, "Yellow", "sans-serif")
    canvas.draw_text("Card Count:  " + str(player.get_value()), [25, 525], 16, "White", "sans-serif")
    canvas.draw_text("Score:  " + str(score), [505, 35], 18, "White", "sans-serif")
    canvas.draw_text("Player", [25, 375], 28, "White", "sans-serif")
    canvas.draw_text("Dealer", [25, 175], 28, "White", "sans-serif")
    canvas.draw_text("Blackjack", [240, 40], 32, "White", "sans-serif")

# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

# create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit", hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)

# deal an initial hand
deal()

# start frame
frame.start()
